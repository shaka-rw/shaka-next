// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now()) @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

enum UserRole {
  ADMIN
  SELLER
  CUSTOMER
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  password      String?
  role          UserRole  @default(CUSTOMER)
  shop          Shop?     @relation(name: "UserShopRelation")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  cart          Cart?
  following     Shop[]    @relation(name: "UserFollowingRelation")
  shopId        String?
  Shop          Shop?     @relation(fields: [shopId], references: [id])
  Order         Order[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id   String @id @default(cuid())
  name String @unique

  shops         Shop[]
  products      Product[]
  assetId       String
  image         Asset      @relation(fields: [assetId], references: [id])
  parent        Category?  @relation("SubCategories", fields: [parentId], references: [id])
  parentId      String?
  subCategories Category[] @relation("SubCategories")
}

model Shop {
  id         String    @id @default(cuid())
  name       String
  assetId    String
  image      Asset     @relation(fields: [assetId], references: [id])
  address    String
  categoryId String
  about      String    @default("")
  approved   Boolean   @default(false)
  userId     String    @unique
  owner      User      @relation(name: "UserShopRelation", fields: [userId], references: [id])
  category   Category  @relation(fields: [categoryId], references: [id])
  products   Product[]
  followers  User[]    @relation(name: "UserFollowingRelation")
  User       User[]
  Order      Order[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now()) @updatedAt
}

enum ProductGender {
  MALE
  FEMALE
  UNISEX
}

model Product {
  id          String            @id @default(cuid())
  name        String
  description String
  gender      ProductGender     @default(UNISEX)
  categories  Category[]
  // main_image    ProductImage @relation(fields: [main_image_id], references: [id])
  mainImage   Asset             @relation(name: "ProductMainImage", fields: [assetId], references: [id])
  sizes       ProductSize[]
  shop        Shop              @relation(fields: [shopId], references: [id])
  shopId      String
  colors      ProductColor[]
  available   Boolean           @default(true)
  published   Boolean           @default(false)
  quantities  ProductQuantity[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @default(now()) @updatedAt
  assetId     String            @unique
}

model ProductSize {
  id         String            @id @default(cuid())
  size       String            @unique
  products   Product[]
  quantities ProductQuantity[]
}

model Cart {
  id            String             @id @default(cuid())
  user          User               @relation(fields: [userId], references: [id])
  userId        String             @unique
  totalQuantity Int?
  totalAmount   Int?
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @default(now()) @updatedAt
  quantities    QuantitiesOnCart[]
}

model QuantitiesOnCart {
  cart              Cart            @relation(fields: [cartId], references: [id])
  quantity          Int
  price             Float?
  productQuantity   ProductQuantity @relation(fields: [productQuantityId], references: [id])
  cartId            String
  productQuantityId String
  createAt          DateTime        @default(now())
  updatedAt         DateTime        @default(now()) @updatedAt

  @@id([cartId, productQuantityId])
}

model Asset {
  id        String     @id @default(cuid())
  assetId   String?
  secureUrl String
  url       String
  isVideo   Boolean    @default(false)
  Category  Category[]
  Shop      Shop[]

  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @default(now()) @updatedAt
  products_main_asset Product?       @relation(name: "ProductMainImage")
  productId           String?        @unique
  colorAssets         ProductColor[] @relation(name: "ColorAssets")
  productMainColor    ProductColor?  @relation(name: "MainColorImage")
  productColorId      String?
}

// Images or videos

model ProductColor {
  id         String            @id @default(cuid())
  mainImage  Asset             @relation(name: "MainColorImage", fields: [assetId], references: [id])
  images     Asset[]           @relation(name: "ColorAssets")
  assetId    String            @unique
  name       String?
  product    Product           @relation(fields: [productId], references: [id])
  productId  String
  quantities ProductQuantity[]
}

model ProductQuantity {
  id             String       @id @default(cuid())
  price          Float
  size           ProductSize  @relation(fields: [productSizeId], references: [id])
  productSizeId  String
  color          ProductColor @relation(fields: [productColorId], references: [id])
  productColorId String
  quantity       Int
  product        Product      @relation(fields: [productId], references: [id])
  productId      String
  orders         Order[]

  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @default(now()) @updatedAt
  QuantitiesOnCart QuantitiesOnCart[]

  @@unique([productSizeId, productColorId])
}

enum OrderStatus {
  PENDING
  PICKUP
  DELIVERY
  COMPLETED
  CANCELED
  REFUND
}

model Order {
  id          String            @id @default(uuid())
  orderNumber BigInt            @unique @default(autoincrement())
  customer    User              @relation(fields: [userId], references: [id])
  userId      String
  shop        Shop              @relation(fields: [shopId], references: [id])
  shopId      String
  quantities  ProductQuantity[]
  isPaid      Boolean           @default(false)
  status      OrderStatus       @default(PENDING)
  totalCost   BigInt?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}
