// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now()) @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

enum UserRole {
  ADMIN
  SELLER
  CUSTOMER
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  password      String?
  role          UserRole  @default(CUSTOMER)
  shops         Shop[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  Cart          Cart[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id   String @id @default(cuid())
  name String @unique

  shops    Shop[]
  products Product[]
}

model Shop {
  id         String    @id @default(cuid())
  name       String
  address    String
  categoryId String
  approved   Boolean   @default(false)
  userId     String
  owner      User      @relation(fields: [userId], references: [id])
  category   Category  @relation(fields: [categoryId], references: [id])
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now()) @updatedAt
  products   Product[]
}

model Product {
  id          String         @id @default(cuid())
  name        String
  description String
  price       Float
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @default(now()) @updatedAt
  categories  Category[]
  // main_image    ProductImage @relation(fields: [main_image_id], references: [id])
  images      ProductAsset[]
  sizes       ProductSize[]
  shop        Shop           @relation(fields: [shopId], references: [id])
  shopId      String
  Cart        Cart[]
}

model ProductSize {
  id       String    @id @default(cuid())
  size     String    @unique
  products Product[]
}

model Cart {
  id        String  @id @default(cuid())
  product   Product @relation(fields: [productId], references: [id])
  productId String
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  quantity  Int
  total     Int?

  @@unique([productId, userId])
}

// Images or videos
model ProductAsset {
  id         String   @id @default(cuid())
  assetId    String?
  secureUrl  String
  url        String
  isVideo    Boolean  @default(false)
  isMain     Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  product_id String
  product    Product  @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
